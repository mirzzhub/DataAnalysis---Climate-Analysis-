# -*- coding: utf-8 -*-
"""climateanalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j1LggVg-pyk1rr7YL7xELpltSWRbHnhE

Operations on daily data .

DAILY DATA : EDA (mean , median , standard deviation , mode , range , variance , correlation matrix , IQR
"""

import pandas as pd

df1 = pd.read_csv('/content/daily_data.csv')

#ed analysis

num_cols = ['DailyAverageDewPointTemperature','DailyAverageDryBulbTemperature','DailyAverageRelativeHumidity','DailyAverageSeaLevelPressure','DailyAverageStationPressure','DailyAverageWetBulbTemperature','DailyAverageWindSpeed','DailyCoolingDegreeDays','DailyDepartureFromNormalAverageTemperature','DailyHeatingDegreeDays','DailyMaximumDryBulbTemperature','DailyMinimumDryBulbTemperature','DailyPeakWindDirection','DailyPeakWindSpeed','DailySnowDepth','DailySustainedWindDirection','DailySustainedWindSpeed']

mean_val = df1[num_cols].mean(numeric_only = True).astype(int)

med_val = df1[num_cols].median(numeric_only = True).astype(int)

std_val = df1[num_cols].std(numeric_only = True)

mode_val = df1[num_cols].mode(numeric_only = True)

range_val = df1[num_cols].max(numeric_only = True) - df1[num_cols].min(numeric_only = True)

variance_val =df1[num_cols].var(numeric_only = True)

cor_mat = df1[num_cols].corr(numeric_only = True)

Q1 = df1[num_cols].quantile(0.25,numeric_only = True)
Q3 = df1[num_cols].quantile(0.75,numeric_only = True)
iqr = Q3 - Q1

print("MEAN")
print(mean_val)
print(" ")
print("MEDIAN")
print(med_val)
print(" ")
print("STANDARD DEVIATION")
print(std_val)
print(" ")
print("MODE")
print(mode_val)
print(" ")
print("RANGE")
print(range_val)
print(" ")
print("VARIANCE")
print(variance_val)
print(" ")
print("CORRELATION MATRIX:")
print(cor_mat)
print(" ")
print("IQR")
print(iqr)

"""Visualization of the Daily data .

STEPS :
1. Convert date column to datetime format
2. Check data types and summary statistics
3. Check for duplicates
4. Remove duplicates if any
5. Visualize distribution of hourly temperature
"""

import pandas as pd
import matplotlib.pyplot as plt


df1 = pd.read_csv('/content/daily_data.csv')

# print("Column Names:\n", df1.columns)

missing_values = df1.isnull().sum()
print("Missing Values:\n", missing_values)

df1['DATE'] = pd.to_datetime(df1['DATE'])

print("Data Types:\n", df1.dtypes)
print("Summary Statistics:\n", df1.describe())

duplicates = df1.duplicated().sum()
print("Number of duplicates:", duplicates)

data = df1.drop_duplicates()

plt.hist(data['DailyAverageDryBulbTemperature'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Daily Average Dry Bulb Temperature')
plt.ylabel('Frequency')
plt.title('Distribution of Daily Average Dry Bulb Temperature')
plt.show()

"""CONVERTING TO NUMERICAL VALUES :
1. Convert 'T' to a very small numerical value, e.g., 0.01 inches
2. Convert the column to numeric values, coercing errors to convert 'T' to NaN
"""

import pandas as pd

df1 = pd.read_csv('/content/daily_data.csv')

df1['DailySnowfall'] = df1['DailySnowfall'].replace('T', 0.01)

df1['DailySnowfall'] = pd.to_numeric(df1['DailySnowfall'], errors='coerce')

print(df1['DailySnowfall'])

"""Operations on Monthly Data

MONTHLY DATA : EDA
"""

import pandas as pd

df2 = pd.read_csv('/content/monthly_data.csv')

#ed analysis

num_cols = ['CDSD','CLDD','DSNW','HDSD','HTDD','MonthlyDaysWithGT001Precip','MonthlyDaysWithGT010Precip','MonthlyDaysWithGT32Temp','MonthlyDaysWithGT90Temp','MonthlyDaysWithLT0Temp','MonthlyDaysWithLT32Temp','MonthlyDepartureFromNormalAverageTemperature','MonthlyDepartureFromNormalCoolingDegreeDays','MonthlyDepartureFromNormalHeatingDegreeDays','MonthlyDepartureFromNormalMaximumTemperature','MonthlyDepartureFromNormalMinimumTemperature','MonthlyDepartureFromNormalPrecipitation','MonthlyGreatestPrecip','MonthlyGreatestSnowDepth','MonthlyMaxSeaLevelPressureValue','MonthlyMaxSeaLevelPressureValueDate','MonthlyMaxSeaLevelPressureValueTime','MonthlyMaximumTemperature','MonthlyMeanTemperature','MonthlyMinSeaLevelPressureValue','MonthlyMinSeaLevelPressureValueDate','MonthlyMinSeaLevelPressureValueTime','MonthlyMinimumTemperature','MonthlySeaLevelPressure','MonthlyStationPressure','MonthlyTotalLiquidPrecipitation','NormalsHeatingDegreeDay']

mean_val = df2[num_cols].mean(numeric_only = True).astype(int)

med_val = df2[num_cols].median(numeric_only = True).astype(int)

std_val = df2[num_cols].std(numeric_only = True)

mode_val = df2[num_cols].mode(numeric_only = True)

range_val = df2[num_cols].max(numeric_only = True) - df2[num_cols].min(numeric_only = True)

variance_val =df2[num_cols].var(numeric_only = True)

cor_mat = df2[num_cols].corr(numeric_only = True)

Q1 = df2[num_cols].quantile(0.25,numeric_only = True)
Q3 = df2[num_cols].quantile(0.75,numeric_only = True)
iqr = Q3 - Q1

print("MEAN :")
print(" ")
print(mean_val)
print(" ")
print("MEDIAN :")
print(" ")
print(med_val)
print(" ")
print("STANDARD DEVIATION :")
print(" ")
print(std_val)
print(" ")
print("MODE :")
print(" ")
print(mode_val)
print(" ")
print("RANGE  :")
print(" ")
print(range_val)
print(" ")
print("VARIANCE :")
print(" ")
print(variance_val)
print(" ")
print("CORRELATION MATRIX :")
print(" ")
print(cor_mat)
print(" ")
print("IQR :")
print(" ")
print(iqr)

"""VISUALIZATION OF MONTHLY DATA"""

import pandas as pd
import matplotlib.pyplot as plt


df2 = pd.read_csv('/content/monthly_data.csv')
# print("Column Names:\n", df2.columns)

missing_values = df2.isnull().sum()
print("Missing Values:\n", missing_values)

df2['DATE'] = pd.to_datetime(df2['DATE'])

print("Data Types:\n", df2.dtypes)
print("Summary Statistics:\n", df2.describe())

duplicates = df2.duplicated().sum()
print("Number of duplicates:", duplicates)

data = df2.drop_duplicates()

plt.hist(data['MonthlyMeanTemperature'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Monthly Mean Temperature')
plt.ylabel('Frequency')
plt.title('Distribution of Monthly Mean Temperature')
plt.show()

"""NUMERICAL VALUE CONVERSION

"""

import pandas as pd

df2 = pd.read_csv('/content/monthly_data.csv')

df2['MonthlyGreatestSnowfall'] = df2['MonthlyGreatestSnowfall'].replace('T', 0.01)

df2['MonthlyGreatestSnowfall'] = pd.to_numeric(df2['MonthlyGreatestSnowfall'], errors='coerce')

print(df2['MonthlyGreatestSnowfall'])

"""Operations on Hourly Data

HOURLY DATA : EDA
"""

import pandas as pd

df3 = pd.read_csv('/content/hourly_data.csv')

#ed analysis

num_cols = ['HourlyDewPointTemperature','HourlyDryBulbTemperature','HourlyRelativeHumidity','HourlySeaLevelPressure','HourlyStationPressure','HourlyVisibility','HourlyWetBulbTemperature','HourlyWindSpeed']

mean_val = df3[num_cols].mean(numeric_only = True).astype(int)

med_val = df3[num_cols].median(numeric_only = True).astype(int)

std_val = df3[num_cols].std(numeric_only = True)

mode_val = df3[num_cols].mode(numeric_only = True)

range_val = df3[num_cols].max(numeric_only = True) - df3[num_cols].min(numeric_only = True)

variance_val =df3[num_cols].var(numeric_only = True)

cor_mat = df3[num_cols].corr(numeric_only = True)

Q1 = df3[num_cols].quantile(0.25,numeric_only = True)
Q3 = df3[num_cols].quantile(0.75,numeric_only = True)
iqr = Q3 - Q1

print("MEAN :")
print(" ")
print(mean_val)
print(" ")
print("MEDIAN :")
print(" ")
print(med_val)
print(" ")
print("STANDARD DEVIATION :")
print(" ")
print(std_val)
print(" ")
print("MODE :")
print(" ")
print(mode_val)
print(" ")
print("RANGE  :")
print(" ")
print(range_val)
print(" ")
print("VARIANCE :")
print(" ")
print(variance_val)
print(" ")
print("CORRELATION MATRIX :")
print(" ")
print(cor_mat)
print(" ")
print("IQR :")
print(" ")
print(iqr)

"""VISUALIZATION OF HOURLY DATA

"""

import pandas as pd
import matplotlib.pyplot as plt


df3 = pd.read_csv('/content/hourly_data.csv')


# print("Column Names:\n", df3.columns)
print(df3['HourlyDryBulbTemperature'].dtype)
#converting to numeric value
df3['HourlyDryBulbTemperature'] = pd.to_numeric(df3['HourlyDryBulbTemperature'], errors='coerce')

missing_values = df3.isnull().sum()
print("Missing Values:\n", missing_values)

df3['DATE'] = pd.to_datetime(df3['DATE'])

print("Data Types:\n", df3.dtypes)
print("Summary Statistics:\n", df3.describe())

duplicates = df3.duplicated().sum()
print("Number of duplicates:", duplicates)

data = df3.drop_duplicates()

plt.hist(data['HourlyDryBulbTemperature'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Hourly Dry Bulb Temperature')
plt.ylabel('Frequency')
plt.title('Distribution of Hourly Dry Bulb Temperature')
plt.show()

"""Operations on Three_hour Data

THREE HOUR DATA : EDA
"""

import pandas as pd

df4 = pd.read_csv('/content/three_hour_data.csv')

#ed analysis

num_cols = ['HourlyDewPointTemperature','HourlyDryBulbTemperature','HourlyPressureChange','HourlyPressureTendency','HourlyRelativeHumidity','HourlySeaLevelPressure','HourlyStationPressure','HourlyVisibility','HourlyWetBulbTemperature','HourlyWindDirection','HourlyWindSpeed']

mean_val = df4[num_cols].mean(numeric_only = True).astype(int)

med_val = df4[num_cols].median(numeric_only = True).astype(int)

std_val = df4[num_cols].std(numeric_only = True)

mode_val = df4[num_cols].mode(numeric_only = True)

range_val = df4[num_cols].max(numeric_only = True) - df4[num_cols].min(numeric_only = True)

variance_val =df4[num_cols].var(numeric_only = True)

cor_mat = df4[num_cols].corr(numeric_only = True)

Q1 = df4[num_cols].quantile(0.25,numeric_only = True)
Q3 = df4[num_cols].quantile(0.75,numeric_only = True)
iqr = Q3 - Q1

print("MEAN :")
print(" ")
print(mean_val)
print(" ")
print("MEDIAN :")
print(" ")
print(med_val)
print(" ")
print("STANDARD DEVIATION :")
print(" ")
print(std_val)
print(" ")
print("MODE :")
print(" ")
print(mode_val)
print(" ")
print("RANGE  :")
print(" ")
print(range_val)
print(" ")
print("VARIANCE :")
print(" ")
print(variance_val)
print(" ")
print("CORRELATION MATRIX :")
print(" ")
print(cor_mat)
print(" ")
print("IQR :")
print(" ")
print(iqr)

"""VISUALIZATION OF 3 HOUR DATA"""

import pandas as pd
import matplotlib.pyplot as plt


df4 = pd.read_csv('/content/three_hour_data.csv')


print("Column Names:\n", df4.columns)
print(df4['HourlyDryBulbTemperature'].dtype)
#converting to numeric value
df4['HourlyDryBulbTemperature'] = pd.to_numeric(df4['HourlyDryBulbTemperature'], errors='coerce')

missing_values = df4.isnull().sum()
print("Missing Values:\n", missing_values)

df4['DATE'] = pd.to_datetime(df4['DATE'])

print("Data Types:\n", df4.dtypes)
print("Summary Statistics:\n", df4.describe())

duplicates = df4.duplicated().sum()
print("Number of duplicates:", duplicates)

data = df4.drop_duplicates()

plt.hist(data['HourlyDryBulbTemperature'], bins=20, color='skyblue', edgecolor='black')
plt.xlabel('Hourly Dry Bulb Temperature')
plt.ylabel('Frequency')
plt.title('Distribution of Hourly Dry Bulb Temperature')
plt.show()